trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  csharpProject: '**/Nomad.Client.NSwag.csproj'
  csharpTestProject: './client/csharp/Nomad.Client.Test/Nomad.Client.Test.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: YarnInstaller@3
  inputs:
    versionSpec: '1.x'
    checkLatest: true

- task: GoTool@0
  inputs:
    version: '1.14'

- task: PowerShell@2
  displayName: build nomad
  inputs:
    filePath: './scripts/build-nomad.ps1'

- script: |
    yarn install
  displayName: 'yarn install'

- script: |
    yarn bundle
  displayName: 'bundle oas to a single file'

- script: |
    yarn generate-csharp:nswag
  displayName: 'generate csharp client (nswag)'

- task: UseGitVersion@5
  inputs:
    versionSpec: '5.x'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- script: echo %Action%%BuildVersion%
  displayName: 'Set build version'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'SignKey.snk'

- task: CopyFiles@2
  inputs:
    Contents: 'SignKey.snk'
    SourceFolder: '$(Agent.TempDirectory)'
    TargetFolder: './client/csharp/Nomad.Client.NSwag'

- task: DotNetCoreCLI@2
  displayName: build nomad csharp client (nswag)
  inputs:
    command: 'build'
    projects: '$(csharpProject)'
    arguments: '-c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: 'test'
    publishTestResults: true
    arguments: $(csharpTestProject) -c $(buildConfiguration) /p:CollectCoverage=true;CoverletOutputFormat=cobertura;ExcludeByAttribute=Obsolete%2cGeneratedCode%2cCompilerGenerated

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '**/*.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: dotnet pack
  inputs:
    command: 'pack'
    packagesToPack: '$(csharpProject)'
    nobuild: true
    includesymbols: true
    arguments: /p:SymbolPackageFormat=snupkg

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'artifacts'
    publishLocation: 'Container'
